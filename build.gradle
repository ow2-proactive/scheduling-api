/*
 * ProActive Parallel Suite(TM):
 * The Java(TM) library for Parallel, Distributed,
 * Multi-Core Computing for Enterprise Grids & Clouds
 *
 * Copyright (c) 2016 ActiveEon
 * Contact: contact@activeeon.com
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation: version 3 of
 * the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * If needed, contact us to obtain a release under GPL Version 2 or 3
 * or a different license than the AGPL.
 */
buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repository.activeeon.com/content/groups/proactive/"
        }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE'
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
        classpath "io.spring.gradle:dependency-management-plugin:0.3.0.RELEASE"
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:0.4.27'
    }
    dependencies {
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

apply plugin: 'spring-boot'
apply plugin: 'org.sonarqube'
apply from: "$rootDir/gradle/ext/coding-format.gradle"

bootRepackage {
    enabled = false
}

springBoot {
    mainClass = 'org.ow2.proactive.scheduling.api.Application'
}

allprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'org.ow2.proactive'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    defaultTasks 'clean', 'build', 'check'

    dependencyManagement {
        imports {
            mavenBom "org.ow2.proactive:parent-bom:${version}"

            dependencies {
                dependency "com.graphql-java:graphql-java:2.2.0"
            }
        }
    }

    dependencies {
        testCompile 'com.google.truth:truth'
        testCompile 'junit:junit'
        testCompile 'org.mockito:mockito-core'
    }

    repositories {
        if (project.hasProperty('local')) {
            mavenLocal()
        }

        jcenter()

        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
                repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
            }
        }
    }

    sonarqube {
        properties {
            property "sonar.projectKey", "$project.group:scheduling-api"
            property "sonar.projectName", "scheduling-api"
            property "sonar.jdbc.driverClassName", "org.postgresql.Driver"
            property "sonar.language", "java"
            property "sonar.sources", "src/main"
            property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/testDebug.exec"
            property 'sonar.junit.reportsPath', "${buildDir}/test-results"
        }
    }

    sourceSets {
        integrationTest {
            java.srcDir file('src/integration-test/java')
            resources.srcDir file('src/integration-test/resources')

            compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
            runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        classpath += sourceSets.test.runtimeClasspath

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    check.dependsOn integrationTest

    configurations {
        // The following module is excluded to avoid clashes when embedded inside the ProActive Scheduler
        all*.exclude module: 'spring-boot-starter-logging'

        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    idea {
        module {
            testSourceDirs += file('src/integration-test/java')
            testSourceDirs += file('src/integration-test/resources')

            scopes.TEST.plus += [
                    configurations.integrationTestCompile,
                    configurations.integrationTestRuntime
            ]
        }
    }
}
